@using EMSuiteVisualConfigurator.Application.DTOs
@using EMSuiteVisualConfigurator.Application.Features.AccessPoints.Commands
@using EMSuiteVisualConfigurator.Application.Features.EMSuiteConfigurations.Commands
@using EMSuiteVisualConfigurator.CoreBusiness.Entities
@using EMSuiteVisualConfigurator.Shared.Models
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject IJSRuntime JS

<div class="col-3 text-center upload-col">
	<h4>Upload Plan Drawing</h4>
	<div class="input-group justify-content-center">
		<div class="custom-file" @onclick="Upload" disabled="@isDisabled">
			<InputFile class="custom-file-input" title=" " OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile"/>
		</div>		
	</div>
</div>

<div class="col-2"/>
	
<div class="col-2">
    <div class="input-group text-center py-4">
        <input type="text" class="form-control" placeholder="Site @SiteId">
    </div>
</div>

<div class="col-2"/>

<div class="col-3 text-center demo-col py-4">
    <button class="btn btn-success" @onclick="CreateConfiguration"> Generate Demo <span class="bi bi-play"></span></button>
</div>

@code {
	[CascadingParameter] public CreateEMSuiteConfigurationCommand CreateEMSuiteConfigurationModel { get; set; }
	[CascadingParameter] public IList<ConfigurationItem> items { get; set; }
	[CascadingParameter] protected ImageFile FileBase64 { get; set; }
	[Parameter] public Action<ImageFile> OnUploadImage { get; set; }
	[Parameter] public int SiteId { get; set; }

	bool isDisabled = false;
	public List<LoggerDTO> allSensors = new List<LoggerDTO>();
	public List<AccessPointDTO> allAccessPoints = new List<AccessPointDTO>();
	public List<ZoneDTO> allZones = new List<ZoneDTO>();

	async Task CreateConfiguration() {
		CreateEMSuiteConfigurationModel.ConfigurationDTO.ConfigurationName = "123";
		RemoveIconMenuItems();
		foreach (ConfigurationItem item in items.ToArray())
		{
			if (item is LoggerDTO)
			{
				allSensors.Add((LoggerDTO)item);
			}
			if (item is AccessPointDTO)
			{
				allAccessPoints.Add((AccessPointDTO)item);
			}
			if (item is ZoneDTO)
			{
				allZones.Add((ZoneDTO)item);				
			}
		}
		await LinkAndAddZones(CreateEMSuiteConfigurationModel.ConfigurationDTO);
		await LinkAndAddAccessPoints(CreateEMSuiteConfigurationModel);
		Console.WriteLine("setup done");
		await Http.PostAsJsonAsync<CreateEMSuiteConfigurationCommand>("/api/emsuiteconfiguration", CreateEMSuiteConfigurationModel, System.Threading.CancellationToken.None);
	}

	public async Task LinkAndAddZones(EMSuiteConfigurationDTO configurationDTO)
	{
		//Get zones with its channels for each site
		for (int i = 0; i < configurationDTO.Sites.Count; i++)
		{
			var currentSiteId = configurationDTO.Sites[i].Id;
			var zonesLoggersDict = await JS.InvokeAsync<Dictionary<int, int[]>>("GetZonesAndLoggersIds", currentSiteId);
			int zoneCount = zonesLoggersDict.Count;
			var zoneIds = zonesLoggersDict.Keys.ToArray();
			List<ZoneDTO> zonesToLink = new List<ZoneDTO>();

			//Find the ChannelDTOs from the LoggerDTOs (sensors) which have the same Id as the channels from dict
			for (int j = 0; j < zoneCount; j++)
			{
				var loggerIds = zonesLoggersDict[zoneIds[j]];
				List<LoggerDTO> loggers = allSensors.Where(sensor => loggerIds.Contains(sensor.Id)).ToList();
				//Link the ChannelDTOs from the loggersto the zone
				var zoneDTO = allZones.Where(zone => zone.Id == zoneIds[j]).ElementAt(0);
				for (int k = 0; k < loggers.Count; k++)
				{
					zoneDTO.Channels = loggers[k].Ports.ElementAt(0).Channels;
					//Assign the zones that should be linked to the site
				}
				zonesToLink.Add(zoneDTO);
			}
			//Find correct Site and link the zones to it
			Console.WriteLine("Current Site ID: " + currentSiteId);
			Console.WriteLine("Number of Sites: " + configurationDTO.Sites.Count);
			var currentSite = configurationDTO.Sites.Where(site => site.Id == currentSiteId).ElementAt(0);
			currentSite.Zones = zonesToLink;
		}
	}

	public async Task LinkAndAddAccessPoints(CreateEMSuiteConfigurationCommand model)
	{
		List<AccessPointDTO> accessPointsToLink = new List<AccessPointDTO>();

		//Get zones with its channels for each site
		for (int i = 0; i < model.ConfigurationDTO.Sites.Count; i++)
		{
			var currentSiteId = model.ConfigurationDTO.Sites[i].Id;
			var accessPointsLoggersDict = await JS.InvokeAsync<Dictionary<int, int[]>>("GetAccessPointsAndLoggersIds", currentSiteId);
			int accessPointCount = accessPointsLoggersDict.Count;
			var accessPointIds = accessPointsLoggersDict.Keys.ToArray();
			//Find the ChannelDTOs from the LoggerDTOs (sensors) which have the same Id as the channels from dict
			for (int j = 0; j < accessPointCount; j++)
			{
				var loggerIds = accessPointsLoggersDict[accessPointIds[j]];
				List<LoggerDTO> loggersToLink = allSensors.Where(sensor => loggerIds.Contains(sensor.Id)).ToList();
				//Link the LoggerDTOs to the AccessPointDTO
				var accessPointDTO = allAccessPoints.Where(accessPoint => accessPoint.Id == accessPointIds[j]).ElementAt(0);
				accessPointDTO.Loggers = loggersToLink;
				//Assign the accessPoints that should be linked to the configurationModel
				accessPointsToLink.Add(accessPointDTO);				
			}
			//Link the accessPoint to the configurationModel
			if (accessPointsToLink != null)
			{
				model.AccessPointDTOs.AddRange(accessPointsToLink);
			}
		}
	}

	private void RemoveIconMenuItems() {
		ConfigurationItem loggerToRemove = items.Where(item => item.Id == LoggerDTO.IdCount && item is LoggerDTO).ToArray()[0];
		ConfigurationItem accessPointToRemove = items.Where(item => item.Id == AccessPointDTO.IdCount && item is AccessPointDTO).ToArray()[0];
		ConfigurationItem zoneToRemove = items.Where(item => item.Id == ZoneDTO.IdCount && item is ZoneDTO).ToArray()[0];
		items.Remove(loggerToRemove);
		items.Remove(accessPointToRemove);
		items.Remove(zoneToRemove);
	}

	async Task OnChange(InputFileChangeEventArgs e)
	{
		var file = e.File; // get the files selected by the users
		var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
		var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
		using (var stream = resizedFile.OpenReadStream())
		{
			await stream.ReadAsync(buf); // copy the stream to the buffer
		};
		// convert to a base64 string!!
		FileBase64.base64data = Convert.ToBase64String(buf); 
		FileBase64.contentType = file.ContentType;
		FileBase64.fileName = file.Name;
		OnUploadImage?.Invoke(new ImageFile{base64data = FileBase64.base64data, contentType = FileBase64.contentType ,fileName = FileBase64.fileName});
	}	

	async Task Upload()
	{
		isDisabled = true;
		using (var msg = await Http.PostAsJsonAsync<ImageFile>("/api/upload", FileBase64, System.Threading.CancellationToken.None))
		{
			isDisabled = false;
		}
	}
	
}
