@using EMSuiteVisualConfigurator.Application.Features.AccessPoints.Requests
@using EMSuiteVisualConfigurator.Shared.Models
@using System.Text.Json.Serialization
@inject HttpClient Http

<div class="col-3 text-center upload-col">
	<h4>Upload Plan Drawing</h4>
    <div class="input-group" >
		<div class="custom-file" @onclick="Upload" disabled="@isDisabled">
			<InputFile class="custom-file-input" title=" " OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile"/>
		</div>		
	</div>
</div>

<div class="col-2">
	
</div>

<div class="col-2 sitename-col">
    <div class="input-group text-center">
        <input type="text" class="form-control" placeholder="Site Name" value="@AccessPointRequest.Name" @onchange="HandleInput">
    </div>
</div>

<div class="col-2"/>

<div class="col-3 text-center demo-col">
    <button class="btn btn-success" @onclick="OnGenerate">Generate Demo<span class="bi bi-play"></span></button>
</div>
@code {
	[CascadingParameter] protected ImageFile FileBase64 { get; set; }
	[Parameter] public Action<ImageFile> OnUploadImage { get; set; }
	public AccessPointRequest AccessPointRequest { get; set; } = new AccessPointRequest();

	bool isDisabled = false;

	async Task OnChange(InputFileChangeEventArgs e)
	{
		var file = e.File; // get the files selected by the users
		var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
		var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
		using (var stream = resizedFile.OpenReadStream())
		{
			await stream.ReadAsync(buf); // copy the stream to the buffer
		};
		// convert to a base64 string!!
		FileBase64.base64data = Convert.ToBase64String(buf); 
		FileBase64.contentType = file.ContentType;
		FileBase64.fileName = file.Name;
		OnUploadImage?.Invoke(new ImageFile{base64data = FileBase64.base64data, contentType = FileBase64.contentType ,fileName = FileBase64.fileName});
	}

	async Task OnGenerate() {
		await Http.PostAsJsonAsync<AccessPointRequest>("api/accesspoint", AccessPointRequest);
	}

	public void HandleInput(ChangeEventArgs args)
	{
		AccessPointRequest.Name += args.Value;
	}

	async Task Upload()
	{
		isDisabled = true;
		using (var msg = await Http.PostAsJsonAsync<ImageFile>("/api/upload", FileBase64, System.Threading.CancellationToken.None))
		{
			isDisabled = false;
		}
	}
}
